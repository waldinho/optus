{"version":3,"sources":["styleVars/variables.js","components/Header.js","components/ProgressBar.js","api/getData.js","containers/ProgressBarContainer.js","App.js","serviceWorker.js","index.js"],"names":["font","width","Heading","styled","div","Header","className","src","alt","title","Track","style","Thumb","props","percentage","limitColor","Percentage","ProgressBar","bars","limit","map","item","i","barPercentageLimit","key","aria-label","toFixed","defaultProps","a","axios","get","response","data","Container","Controls","ErrorText","h3","ProgressBarContainer","state","buttons","selected","loading","error","errorText","getData","then","setState","catch","console","log","this","type","color","height","timeout","itemPercentage","toString","charAt","onClick","index","temp","concat","splice","callBack","handleClick","onChange","e","parseInt","target","value","Component","AppWrapper","ProgressBarWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.10f46d34.chunk.js","sourcesContent":["// Colors\nexport const yellow = \"#fdcc08\";\nexport const green = \"#00a3ad\";\nexport const red = \"#ff6e7e\";\nexport const white = \"#fff\";\nexport const black = \"#000\";\n\n// Font \nexport const font = \"'Helvetica Neue',Helvetica,Helvetica,Arial,sans-serif\";\n\n// Font sizes \nexport const sm = \"10px\";\nexport const md = \"14px\";\nexport const lg = \"18px\";\n\n// Media queries\nexport const mobile = \"321px\";\nexport const desktop = \"600px\";\nexport const widescreen = \"1440px\";\n\n// Mixins\nexport const width = () => `\n    width: 100%;\n    max-width:300px;\n`;\nexport const paragraph = () => `\n    line-height: 0;\n    position: relative;\n    top: 37.5px;\n    color: ${black};\n`;\nexport const center = () => `\n    display: flex;\n    justify-content: center;\n`;\nexport const column = () => `\n    display: flex;\n    flex-direction: column;\n`;\nexport const row = () => `\n    display: flex;\n    flex-direction: row;\n`;\nexport const button = () => `\n    border: 2px solid ${black};\n    border-radius: 5px;\n    color: ${black};\n    background-color: ${white};\n    max-width: 23.5%;\n    min-height: 44px;\n    margin: 0 2% 2rem 0;\n    text-transform: uppercase;\n    width: 100%;\n    font-size: ${md};\n`;\nexport const input = () => `\n    border: 2px solid ${black};\n    box-sizing: border-box;\n    color: ${black};\n    font-size: ${md};\n    height: 48px;\n    width: 100%;\n    line-height: 25.5px;\n    padding: 10.5px 14px 14px 14px;\n    margin: 0;\n    font-family: ${font};\n`\nexport const hideArrow = () => `\n    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'),\n    linear-gradient(to bottom, ${white} 0%, ${white} 100%);\n    background-repeat: no-repeat, repeat;\n    background-position: right .7em top 50%, 0 0;\n    background-size: .65em auto, 100%;\n    -o-appearance: none;\n    -ms-appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nimport * as style from '../styleVars/variables.js';\n\nconst Heading = styled.div`\n    background-color: ${style.black};\n    min-height: 6vh;\n    ${style.column}\n    align-items: center;\n    justify-content: center;\n    font-size: calc(${style.sm} + 2vmin);\n    color: ${style.yellow};\n    min-width: 335px;\n    position: fixed;\n    top: 0;\n    width: -webkit-fill-available;\n    z-index: 2;\n    border-bottom: 1px solid ${style.black};\n    .logo {\n        width: 80px;\n    }\n`\n\nconst Header = () => (\n    <Heading>\n        <img className='logo' src='https://1.cdn.optusdigital.com/content/dam/optus/images/about-us/media-centre/multimedia/logos/OPTUS_Yellow_sRGB_RELEASE_03_310316.png/renditions/version-1506405814053/original.png' alt='Optus' title='Optus'/>\n    </Heading>\n) \n\nexport default Header","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport * as style from '../styleVars/variables.js';\n\nconst Track = styled.div `\n    ${style.width}\n    height: 40px;\n    background: ${style.yellow};\n    border: 2px solid ${style.black};\n`;\n\nconst Thumb = styled.div `\n    width: ${props => props.percentage}%;\n    max-width: 300px;\n    height: 100%;\n    background: ${props => props.limitColor};\n    transition: width 0.3s ease-in-out;\n`\n\nconst Percentage = styled.div `\n    ${style.center}\n    ${style.width}\n    p {\n        ${style.paragraph}\n        font-weight: bold;\n    }\n`\n\nconst ProgressBar = ({bars, limit}) => {\n    return (\n        bars.map((item, i) => {\n            const barPercentage = item < 0 ? 0 : item;\n            const barPercentageLimit = barPercentage / (limit / 100);\n            const limitColor = barPercentageLimit >= 100 ? `${style.red}` : `${style.green}`;\n            return (\n                <div key={i}>\n                    <Percentage>\n                        <p aria-label={`${barPercentageLimit.toFixed(0)}%`}>{barPercentageLimit.toFixed(0)}%</p>\n                    </Percentage>\n                    <Track>\n                        <Thumb\n                            percentage={barPercentageLimit}\n                            limitColor={limitColor}\n                        />\n                    </Track>\n                </div>\n            )\n        })\n    )\n}\n\nProgressBar.propTypes = {\n    bars: PropTypes.array,\n    limit: PropTypes.number.isRequired, \n}\n\nProgressBar.defaultProps = {\n    bars: [],\n    limit: 0, \n}\n\nexport default ProgressBar;","import axios from 'axios';\n\nexport async function getData() {\n  const response = await axios.get('https://pb-api.herokuapp.com/bars');\n  return response.data;\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport ProgressBar from '../components/ProgressBar';\nimport Loader from 'react-loader-spinner'\n\nimport { getData } from '../api/getData';\nimport * as style from '../styleVars/variables.js';\n\nconst Container = styled.div `\n    margin: 3rem 0 2rem 0;\n    text-align: center;\n    @media screen and (min-width: ${style.widescreen}) {\n        margin: 8rem 0 2rem 0;\n    }\n    h2 {\n        line-height: 0rem;\n    }\n    button {\n        ${style.button}\n        font-family: ${style.font};\n        &:hover {\n            background: ${style.yellow};\n            color: ${style.black};\n        }\n        &:nth-child(4) {\n            margin: 0;\n        }\n    }\n    input, select {\n        ${style.input}\n    }\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n    }\n    input[type=number] {\n        -moz-appearance: textfield;\n    }\n    select {\n        ${style.hideArrow}\n    }\n`;\n\nconst Controls = styled.div `\n    margin: 2rem 0 0 0;\n`;\n\nconst ErrorText = styled.h3 `\n    color: ${style.red};\n    font-weight: bold;\n`;\n\nclass ProgressBarContainer extends Component {\n    state = {\n        bars: [0],\n        buttons: [0],\n        limit: 0,\n        selected: 0,\n        loading: true,\n        error: false,\n        errorText: 'Oops... Something has gone wrong, please try again later.'\n    }\n    componentDidMount() {\n        getData()\n        .then((response) => {\n            this.setState({\n                bars: response.bars,\n                buttons: response.buttons,\n                limit: response.limit,\n                loading: false,\n\n            })\n        })\n        .catch(() => {\n            this.setState({error: true});\n            console.log('ERROR: Unsuccessful API call...');\n        })\n    }\n    render() {\n    const {\n        bars,\n        buttons,\n        limit,\n        selected,\n        loading,\n        error,\n        errorText,\n    } = this.state\n    const callBack = (temp, selected) => {\n        if (temp[selected] < 0) {\n            temp.splice(selected, 1, 0);\n        };\n    }\n    const handleClick = (index, selected) => {\n        let temp = [];\n        temp = temp.concat(bars);\n        temp.map((item, i) => {\n            if (i === selected) {\n                temp.splice(selected, 1, item + index);\n            }\n            if (item < 0) {\n                temp.splice(selected, 1, 0);\n            } return ''\n        });\n        this.setState({bars: temp}, () => {callBack(temp, selected)});\n    };\n    return (\n        <Container>\n            {loading ?\n                <Loader\n                    type=\"Oval\"\n                    color=\"#00a3ad\"\n                    height={80}\n                    width={80}\n                    timeout={1000}\n                />\n            : \n            !error ?\n            <>\n                <h2 aria-label={`Limit: ${limit}`}>Limit: {limit}</h2>\n                <ProgressBar \n                    bars={bars}\n                    limit={limit}\n                />\n                <Controls>\n                    {buttons.map((item, i) => {\n                        const firstCharacter = item.toString().charAt(0);\n                        const itemPercentage = firstCharacter === '-' ? (item / (limit / 100)).toFixed(0) : `+${(item / (limit / 100)).toFixed(0)}`;\n                        return (\n                            <button onClick={() => {handleClick(item, selected)}} key={i}>\n                                {itemPercentage}%\n                            </button>\n                        )}\n                    )}\n                    <select onChange={e => {this.setState({ selected: parseInt(e.target.value) })}}>\n                        {bars.map((item, i) => (\n                            <option value={i} key={i}>Progress #{i + 1}</option>\n                        ))}\n                    </select>\n                </Controls>\n            </>\n            :\n            <ErrorText aria-label={errorText}>{errorText}</ErrorText>\n        }\n        </Container>\n    )}\n}\n\nexport default ProgressBarContainer;","import React from 'react';\nimport styled from 'styled-components';\nimport Header from './components/Header';\nimport ProgressBarContainer from './containers/ProgressBarContainer';\n\nconst AppWrapper = styled.div `\n  display: flex;\n  justify-content: center;\n`\nconst ProgressBarWrapper = styled.div `\n  width: 300px;\n  margin-top 3rem;\n`\n\nconst App = () => {\n  return (\n    <>\n      <AppWrapper>\n        <Header />\n        <ProgressBarWrapper>\n          <ProgressBarContainer />\n        </ProgressBarWrapper>\n      </AppWrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}